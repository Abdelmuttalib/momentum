// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    phoneNumber         String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    password      String
    role  Role    @default(Member)
    teams Team[]
    tasks     Task[]
    comments  Comment[]
}

enum Role {
  Admin
  Member
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Team {
  id     String     @id @default(cuid())
  name   String
  users  User[]
  projects Project[]
}


model Project {
  id       String     @id @default(cuid())
  name     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status   ProjectStatus    // To keep track of the progress of the project
  tasks    Task[]
  teamId   String
  team     Team      @relation(fields: [teamId], references: [id])
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
}


model Task {
  id        String   @id @default(cuid())
  title      String
  description String?
  status    TaskStatus
  priority Priority
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dueDate   DateTime?
  assigneeId String?
  assignee  User?     @relation(fields: [assigneeId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  comments  Comment[]
}

enum TaskStatus {
  BACKLOG
  IN_PROGRESS
  IN_REVIEW
  REVISION
  COMPLETED
  CANCELED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id])
}
